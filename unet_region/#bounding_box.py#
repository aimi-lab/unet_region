import numpy as np
from PIL import Image, ImageDraw
from skimage import draw
from skimage import transform
import matplotlib.pyplot as plt

import pdb; pdb.set_trace() ## DEBUG ##

class BoundingBox:
    def __init__(self,
                 corners,
                 orig_shape,
                 expand_n_pix=10):

        i, j = corners
        if ((len(i) != 2) | (len(j) != 2)):
            raise Exception(
                'BoundingBox of shape ({},{}) but must be (2, 2)'.format(
                    len(i), len(j)))

        self.i = np.array(i)
        self.j = np.array(j)

        self.expand_n_pix = expand_n_pix
        self.orig_shape = orig_shape

    @classmethod
    def fromdict(cls, dict_):
        # create dummy box (will be overwritten)
        bbox = cls(corners=((0, 0), (0, 0)), orig_shape=-1)

        return bbox.load_state_dict(dict_)

    def contract_x(self):

        center = np.mean(self.j)

        new_j = np.array(self.j) + (self.expand_n_pix//2, -self.expand_n_pix//2)

        curr_dim = new_j[1] - new_j[0]

        if(curr_dim < 1):
            self.j = (center - (1, -1)).tolist()
            return False

        self.j = new_j.tolist()

        return True

    def contract_y(self):
        
        center = np.mean(self.i)

        new_i = np.array(self.i) + (self.expand_n_pix//2, -self.expand_n_pix//2)

        curr_dim = new_i[1] - new_i[0]

        if(curr_dim < 1):
            self.i = (center - (1, -1)).tolist()
            return False

        self.i = new_i.tolist()

        return True

    def __str__(self):
        str_ = '(i, j): ({}, {})'.format(self.i, self.j)
        return str_
    
    def expand_x(self):
        self.j = ((self.j - np.mean(self.j)) + (
            -self.expand_n_pix//2, self.expand_n_pix//2) + np.mean(self.j)).tolist()

    def expand_y(self):
        self.i = ((self.i - np.mean(self.i)) + (
            -self.expand_n_pix//2, self.expand_n_pix//2) + np.mean(self.i)).tolist()

    @property
    def coords(self):
        return [tuple(np.round(np.sort(self.i)).astype(int).tolist()),
                tuple(np.round(np.sort(self.j)).astype(int).tolist())]

    @property
    def center(self):
        return [np.mean(self.coords[0]),
                np.mean(self.coords[1])]

    def apply_actions(self, actions):
        bbox_out = BoundingBox(
            corners=(self.i, self.j),
            orig_shape=self.orig_shape,
            expand_n_pix=self.expand_n_pix)

        # flag checks for "illegal" actions
        ok = True
        for a in actions:
            if (a == 'ex'):
                bbox_out.expand_x()
            elif (a == 'ey'):
                bbox_out.expand_y()
            elif (a == 'cx'):
                ok = bbox_out.contract_x()
            elif (a == 'cy'):
                ok = bbox_out.contract_y()
            elif (a == 'cxy'):
                ok = bbox_out.contract_y()
                ok = bbox_out.contract_x()

        return bbox_out, ok

    @property
    def shape(self):
        return (self.i[1] - self.i[0] + 1,
                self.j[1] - self.j[0] + 1)

    def resize(self, new_shape):
        factor_i = self.orig_shape[0] / new_shape[0]
        factor_j = self.orig_shape[1] / new_shape[1]

        self.i = (self.i / factor_i).astype(int)
        self.j = (self.j / factor_j).astype(int)

        self.orig_shape = new_shape
        
        return self

    def paste_patch(self, patch):
        if(patch.shape[:2] != self.shape):
            raise Exception('patch must be same as bounding box shape')

        # generate mask on padded
        out = self.get_mask(shape=np.array(self.orig_shape) + np.array(self.shape),
                            offset=(self.shape[0]//2, self.shape[1]//2))

        np.place(out, out, patch)

        out = out[self.shape[0] // 2 : -self.shape[0] // 2,
                  self.shape[1] // 2 : -self.shape[1] // 2]

        return out
            
    def get_mask(self, shape=None, offset=(0, 0)):

        if(shape is None):
            if(self.orig_shape is None):
                raise Exception('set shape or orig_shape')
            else:
                shape = self.orig_shape

        coords = np.array(self.coords).T
        rr, cc = draw.rectangle(coords[0, :] + offset[0],
                                coords[1, :] + offset[1],
                                shape=shape[:2])

        out = np.zeros(shape[:2]).astype(int)
        out[rr, cc] = 1
        return out

    def get_ellipse_mask(self, shape=None):

        if(shape is None):
            shape = self.orig_shape

        box_ = np.array(self.coords).T.ravel().tolist()
        mask = Image.new('RGB', (shape[:2]))
        draw = ImageDraw.Draw(mask)
        draw.ellipse(box_, fill=1)
        del draw
        return np.array(mask).transpose((1, 0, 2))[..., 0]

    def apply_mask(self, im, color=(0, 0, 1), alpha=0.2, mode='box'):
        if not ((mode != 'box') | (mode != 'ellipse')):
            raise Exception('mode must be box or ellipse')

        if (mode == 'box'):
            mask = self.get_mask(im.shape)
        else:
            mask = self.get_ellipse_mask(im.shape)

        mask = np.array([mask * c for c in color]).transpose((1, 2, 0)).astype(float)
        im_ = im.copy()
        im_ = (1 - alpha) * im_ + alpha * mask

        return im_

    def concat_mask(self, im):
        im_ = im.copy()
        mask = self.get_mask(im_.shape[:2])[..., np.newaxis]

        if(im_.dtype == np.uint8):
            mask = mask.astype(np.uint8)*255

        im_ = np.concatenate((im_, mask), axis=-1)
        return im_

    def crop_resize_image(self, im, resize_shape=None, margin_ratio=0.05):
        im_ = im.copy()
        coords = self.coords

        range_i = np.arange(coords[0][0], coords[0][1])
        range_j = np.arange(coords[1][0], coords[1][1])

        # deal with zero width/height box
        if (((coords[0][1] - coords[0][0]) < 1)):
            range_i = np.arange(coords[0][0], coords[0][0] + 2)
        if (((coords[1][1] - coords[1][0]) < 1)):
            range_j = np.arange(coords[1][0], coords[1][0] + 2)

        im_ = im_.take(range_i, axis=0, mode='clip')
        im_ = im_.take(range_j, axis=1, mode='clip')
        if (resize_shape is not None):
            im_ = transform.resize(
                im_, resize_shape, preserve_range=True).astype(int)

        return im_

    def state_dict(self):
        return {
            'i': self.i,
            'j': self.j,
            'expand_n_pix': self.expand_n_pix,
            'orig_shape': self.orig_shape,
        }

    @staticmethod
    def load_state_dict(dict_):
        return BoundingBox((dict_['i'], dict_['j']),
                           dict_['orig_shape'],
                           expand_n_pix=dict_['expand_n_pix'])
